package protocol

import (
	"reflect"
	"testing"
)

func TestHeader_Build(t *testing.T) {
	type fields struct {
		PayloadLength uint32
		SequenceId    uint8
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
	}{
		{
			"TestHeader_Build",
			fields{78, 0},
			[]byte{0x4e, 0x00, 0x00, 0x00,},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			packet := &Header{
				PayloadLength: tt.fields.PayloadLength,
				SequenceId:    tt.fields.SequenceId,
			}
			if got := packet.Build(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Build() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestHeader_Resolve(t *testing.T) {
	type fields struct {
		PayloadLength uint32
		SequenceId    uint8
	}
	type args struct {
		byteSlice []byte
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		{
			"TestHeader_Resolve",
			fields{78, 0},
			args{[]byte{0x4e, 0x00, 0x00, 0x00,}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			want := &Header{
				PayloadLength: tt.fields.PayloadLength,
				SequenceId:    tt.fields.SequenceId,
			}
			got := new(Header)
			got.Resolve(tt.args.byteSlice)
			if !reflect.DeepEqual(got, want) {
				t.Errorf("Build() = %v, want %v", got, want)
			}
		})
	}
}

func TestMySQLMessage_Build(t *testing.T) {
	type fields struct {
		Header  Header
		Payload []byte
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
	}{
		{
			"TestMySQLMessage_Build",
			fields{
				Header{
					PayloadLength: 78,
					SequenceId:    0,
				},
				[]byte{
					0x0a, 0x35, 0x2e, 0x37,
					0x2e, 0x33, 0x30, 0x2d, 0x6c, 0x6f, 0x67, 0x00,
					0x0b, 0x00, 0x00, 0x00, 0x6c, 0x72, 0x3b, 0x26,
					0x15, 0x3f, 0x4b, 0x2a, 0x00, 0xff, 0xff, 0x08,
					0x02, 0x00, 0xff, 0xc1, 0x15, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
					0x40, 0x67, 0x18, 0x6c, 0x48, 0x2a, 0x4f, 0x72,
					0x6e, 0x2c, 0x11, 0x00, 0x6d, 0x79, 0x73, 0x71,
					0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
					0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
					0x64, 0x00,
				},
			},
			[]byte{
				0x4e, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x37,
				0x2e, 0x33, 0x30, 0x2d, 0x6c, 0x6f, 0x67, 0x00,
				0x0b, 0x00, 0x00, 0x00, 0x6c, 0x72, 0x3b, 0x26,
				0x15, 0x3f, 0x4b, 0x2a, 0x00, 0xff, 0xff, 0x08,
				0x02, 0x00, 0xff, 0xc1, 0x15, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
				0x40, 0x67, 0x18, 0x6c, 0x48, 0x2a, 0x4f, 0x72,
				0x6e, 0x2c, 0x11, 0x00, 0x6d, 0x79, 0x73, 0x71,
				0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
				0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
				0x64, 0x00,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			packet := &MySQLMessage{
				Header:  tt.fields.Header,
				Payload: tt.fields.Payload,
			}
			if got := packet.Build(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Build() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMySQLMessage_Resolve(t *testing.T) {
	type fields struct {
		Header  Header
		Payload []byte
	}
	type args struct {
		byteSlice []byte
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		{
			"TestMySQLMessage_Resolve",
			fields{
				Header{
					PayloadLength: 78,
					SequenceId:    0,
				},
				[]byte{
					0x0a, 0x35, 0x2e, 0x37,
					0x2e, 0x32, 0x36, 0x2d, 0x6c, 0x6f, 0x67, 0x00,
					0x04, 0x00, 0x00, 0x00, 0x0c, 0x76, 0x52, 0x48,
					0x5c, 0x0a, 0x01, 0x58, 0x00, 0xff, 0xf7, 0xc0,
					0x02, 0x00, 0xff, 0x81, 0x15, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75,
					0x0b, 0x3b, 0x01, 0x5c, 0x17, 0x51, 0x39, 0x2a,
					0x27, 0x61, 0x29, 0x00, 0x6d, 0x79, 0x73, 0x71,
					0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
					0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
					0x64, 0x00,
				},
			},
			args{
				[]byte{
					0x4e, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x37,
					0x2e, 0x32, 0x36, 0x2d, 0x6c, 0x6f, 0x67, 0x00,
					0x04, 0x00, 0x00, 0x00, 0x0c, 0x76, 0x52, 0x48,
					0x5c, 0x0a, 0x01, 0x58, 0x00, 0xff, 0xf7, 0xc0,
					0x02, 0x00, 0xff, 0x81, 0x15, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75,
					0x0b, 0x3b, 0x01, 0x5c, 0x17, 0x51, 0x39, 0x2a,
					0x27, 0x61, 0x29, 0x00, 0x6d, 0x79, 0x73, 0x71,
					0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
					0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
					0x64, 0x00,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			want := &MySQLMessage{
				Header:  tt.fields.Header,
				Payload: tt.fields.Payload,
			}
			got := new(MySQLMessage)
			got.Resolve(tt.args.byteSlice)
			if !reflect.DeepEqual(got, want) {
				t.Errorf("Build() = %v, want %v", got, want)
			}
		})
	}
}