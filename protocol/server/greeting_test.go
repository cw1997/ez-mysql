package server

import (
	"bytes"
	"reflect"
	"testing"
)

func TestGreetingBuild(t *testing.T) {
	input := new(Greeting)
	input.Protocol = 10
	input.Version = "5.7.26-log"
	input.ThreadId = 8
	input.Salt = []byte{0x4d, 0x57, 0x7d, 0x14, 0x05, 0x18, 0x6e, 0x62,}
	input.ServerCapabilities = 0xf7ff
	input.ServerLanguage = 192
	input.ServerStatus = 0x0002
	input.ExtendedServerStatus = 0x81ff
	input.ExtendedSaltLength = 21
	input.Reverse = make([]byte, 10)
	input.ExtendedSalt = []byte{
		0x1e, 0x65, 0x36, 0x7e, 0x33, 0x01, 0x7c, 0x41,
		0x35, 0x17, 0x78, 0x0d,
	}
	input.AuthenticationPlugin = "mysql_native_password"

	actual := input.Build()
	except := []byte{
		0x0a, 0x35, 0x2e, 0x37, 0x2e, 0x32, 0x36, 0x2d,
		0x6c, 0x6f, 0x67, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x4d, 0x57, 0x7d, 0x14, 0x05, 0x18, 0x6e, 0x62,
		0x00, 0xff, 0xf7, 0xc0, 0x02, 0x00, 0xff, 0x81,
		0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x1e, 0x65, 0x36, 0x7e, 0x33,
		0x01, 0x7c, 0x41, 0x35, 0x17, 0x78, 0x0d, 0x00,
		0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61,
		0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73,
		0x73, 0x77, 0x6f, 0x72, 0x64, 0x00,
	}

	if !bytes.Equal(actual, except) {
		t.Errorf("input: \n [%+v] \n actual \n [%+v] \n except \n [%+v] \n \n", input, actual, except)
	}
}

func TestGreetingResolve(t *testing.T) {
	input := []byte{
		0x0a, 0x35, 0x2e, 0x37, 0x2e, 0x32, 0x36, 0x2d,
		0x6c, 0x6f, 0x67, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x4d, 0x57, 0x7d, 0x14, 0x05, 0x18, 0x6e, 0x62,
		0x00, 0xff, 0xf7, 0xc0, 0x02, 0x00, 0xff, 0x81,
		0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x1e, 0x65, 0x36, 0x7e, 0x33,
		0x01, 0x7c, 0x41, 0x35, 0x17, 0x78, 0x0d, 0x00,
		0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61,
		0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73,
		0x73, 0x77, 0x6f, 0x72, 0x64, 0x00,
	}

	actual := new(Greeting)
	actual.Resolve(input)

	except := new(Greeting)
	except.Protocol = 10
	except.Version = "5.7.26-log"
	except.ThreadId = 8
	except.Salt = []byte{0x4d, 0x57, 0x7d, 0x14, 0x05, 0x18, 0x6e, 0x62,}
	except.ServerCapabilities = 0xf7ff
	except.ServerLanguage = 192
	except.ServerStatus = 0x0002
	except.ExtendedServerStatus = 0x81ff
	except.ExtendedSaltLength = 21
	except.Reverse = make([]byte, 10)
	except.ExtendedSalt = []byte{
		0x1e, 0x65, 0x36, 0x7e, 0x33, 0x01, 0x7c, 0x41,
		0x35, 0x17, 0x78, 0x0d,
	}
	except.AuthenticationPlugin = "mysql_native_password"

	if !reflect.DeepEqual(actual, except) {
		t.Errorf("input: \n [%+v] \n actual \n [%+v] \n except \n [%+v] \n \n", input, actual, except)
	}
}
